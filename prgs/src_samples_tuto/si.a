!to "si.prg"


*= $0401
        * = $0401
        !word bas_end
        !word $00
        !byte $9e
        !text "2048"
        !byte $00
bas_end !word $00

; Graphics
; tiles/text map
REG_TEXTMAP_L1    = $8000
REG_TILEMAP_L1    = $8800
REG_TILEMAP_L0    = $9000
; tile id 0-255 in 8x8   tile mode
; tile id 0-63  in 16x16 tile mode

; sprites (96 max) in L2
NB_SPRITES_MAX    = 96

REG_SPRITE_IND    = $9800
REG_SPRITE_XHI    = $9880
REG_SPRITE_XLO    = $9900
REG_SPRITE_Y      = $9980
; id:    0-5 (max 63)
; hflip: 6
; vflip: 7

; mode
REG_VIDEO_MODE    = $9b00
; 0-1: resolution (0=640x200,1=320x200,2=256x200)

; bg/text color
REG_BG_COL        = $9b01
; RGB332
REG_FG_COL        = $9b0d
; RGB332
; R: 5-7, 0x20 -> 0xe0   xxx --- --
; G: 2-4, 0x04 -> 0x1c   --- xxx -- 
; B: 0-1, 0x00 -> 0x03   --- --- xx  

; layers config
REG_LAYERS_CFG    = $9b02
; 0: L0 on/off (1=on)
; 1: L1 on/off (1=on)    (off if HIRES and bitmap in L0!)
; 2: L2 on/off (1=on)
; 3: L2 inbetween (0 = sprites top)
; 4: bitmap/tile in L0 (0=bitmap)
; 5: petfont/tile in L1 (0=petfont)
; 6: enable scroll area in L0
; 7: enable scroll area in L1

; tiles config
REG_TILES_CFG     = $9b0e
; 0: L0: 0=8x8, 1=16x16
; 1: L1: 0=8x8, 1=16x16
; 2-4: xcurtain
;      0: on/off
;      1: 8/16 pixels left
; 5-7: ycurtain
;      0: on/off
;      1: 8/16 pixels top

; lines config
REG_LINES_CFG     = $9b03
; 0: single/perline background color
; 1: single/perline L0 xscroll
; 2: single/perline L1 xscroll

; layer scroll
REG_XSCROLL_HI    = $9b04
; 3-0: L0 xscroll HI
; 7-4: L1 xscroll HI
REG_XSCROLL_L0    = $9b05
REG_XSCROLL_L1    = $9b06
REG_YSCROLL_L0    = $9b07
REG_YSCROLL_L1    = $9b08
; 7-0, in pixels
; scroll area
REG_SC_START_L0   = $9b09
REG_SC_END_L0     = $9b0a
REG_SC_START_L1   = $9b0b
REG_SC_END_L1     = $9b0c
; 4-0, in tiles/characters


; vsync line (0-200, 200 is overscan) (RD)
REG_VSYNC         = $9b0f
;
; data transfer
REG_TLOOKUP       = $9a00
; used as RGB332 LUT for pixels (palette) (WR)
; also used as 256 scratch buffer for other commands (WR/RD) 

REG_TDEPTH        = $9b10
; WR
; 1/2/4/8 bits per pixel (using indexed CLUT)
; 9 = 8 bits RGB332 no CLUT
; 0 = compressed

REG_TCOMMAND      = $9b11
; WR
; 0: idle
; 1: transfer tiles data      (data=tilenr,w,h,packet pixels)
; 2: transfer sprites data    (data=spritenr,w,h,packet pixels)
; 3: transfer bitmap data     (data=xh,xl,y,wh,wl,h,w*h/packet pixels) 
; 4: transfer t/fmap col data (data=layer,col,row,size,size/packet tiles)
; 5: transfer t/fmap row data (data=layer,col,row,size,size/packet tiles)
; 6: transfer all tile 8bits data compressed (data=sizeh,sizel,pixels)
; 7: transfer all sprite 8bits data compressed (data=sizeh,sizel,pixels)
; 8: transfer bitmap 8bits data compressed (data=sizeh,sizel,pixels)
; 9: transfer font 1bit data, 8bits a time (data=sizeh,sizel,pixels)  

REG_TPARAMS       = $9b12
; WR

REG_TDATA         = $9b13
; WR

REG_TSTATUS       = $9b14
; transfer status (RD) 1=ready for async commands only

; Redefining tiles/sprite sequence
; 1. write lookup palette entries needed
; 2. write transfer mode (1/2/4/8/9)
; 3. write command 1/2
; 4. write params tile/sprite id,w,h
; 5. write data sequence (8bytes*plane for tiles, (h*2)bytes*plane for sprites)
; (any new command to reset)
;
; Transfer bitmap sequence
; 1. write lookup palette entries needed
; 2. write transfer mode (1/2/4/8/9)
; 3. write command 3
; 4. write params XH,XL,Y,WH,WL,H
; 5. write data sequence (bytes*plane /packed_bits)
; (any new command to reset)

; lines background color / scroll (200 values)
REG_LINES_BG_COL  = $9b38
; RGB332
REG_LINES_XSCR_HI = $9c00
; 7-4:  lines L1 xscroll hi, 3-0: L0 xscroll hi
REG_LINES_L0_XSCR = $9cc8
REG_LINES_L1_XSCR = $9d90
;
; Sprite collision
; only for first 16 sprites against all the rest (96) 
; LO (8bits x 96 entries, first 8 sprites, bit0 = sprite 0) 
; HI (8bits x 96 entries, last  8 sprites, bit0 = sprite 8)
REG_SPRITE_COL_LO = $9f00 
REG_SPRITE_COL_HI = $9f80
;
; Audio
; SID (see C64)
REG_SID_BASE      = $9f00

REG_JOYSTICK      = $e84f

; Joystick macros
JOY_UP            = (1)
JOY_DOWN          = (2)
JOY_LEFT          = (4)
JOY_RIGHT         = (8) 
JOY_FIRE          = (1+2)


;--------------------------------------------------------
; Ship
SHIP_X            = (256-16)/2 
SHIP_Y            = (200-8) 
SHIP_ID           = 4

; Aliens
ALIENS_NB_ROWS     = 5
ALIENS_NB_COLS     = 11
ALIENS_STEP_X      = 16
ALIENS_STEP_Y      = 16
ALIENS_BUMP_LEFT   = (0)
ALIENS_BUMP_RIGHT  = (256-ALIENS_NB_COLS*ALIENS_STEP_X)
ALIENS_BUMP_UP     = (24)
ALIENS_BUMP_DOWN   = (24+8*8)

ALIENS_NB         = (ALIENS_NB_ROWS*ALIENS_NB_COLS)
ALIENS_FIRST_ID   = 5

; Bullets
BULLETS_FIRST_ID  = 0
BULLETS_SHIP_ID   = (BULLETS_FIRST_ID)
BULLETS_ALIEN_ID  = (BULLETS_FIRST_ID+1)
BULLETS_ALIEN_NB  = 3
BULLETS_NB        = 4

BULLET_SHIP_SPID  = 10
BULLET_ALIEN_SPID = 11

; Starfield
STARS_START       = 8
STARS_NB          = (200-8-40)
STAR_TID          = $41

; Shields
SHIELDS_Y         = ((200-40)/8)
SHIELDS_W         = (32)
SHIELDS_SIZE      = (2*SHIELDS_W)
SHIELDS_FIRST_TID = $42



*= $0800
        lda REG_VIDEO_MODE
        pha
        lda REG_LAYERS_CFG
        pha        
        lda REG_BG_COL        
        pha

        lda #2                  ; switch to 256x200 (32x25)
        sta REG_VIDEO_MODE

        jsr initlineoffset      ; initiaze print routine    
        jsr program_sprites     ; transfer sprites definition to pico
        jsr program_tiles       ; transfer sprites definition to pico



loop_title:                     ; show title screen       
        lda #0+2+1+0+32         ; hide sprite layer (L2), show L1 (tiles) and L0 (bitmap)
        sta REG_LAYERS_CFG
        lda #$00                ; background color to black
        sta REG_BG_COL

        jsr hide_sprites        ; hide all sprites
        jsr clear_L1_tilemap    ; clear screen tiles
        jsr reset_line_scroll   ; reset scroll per line
        jsr show_title_bmp      ; Show title screen
        lda #<title_lines
        sta $54
        lda #>title_lines
        sta $55
        jsr print        

;        ldx #0                  ; clear screen tiles
;ss:     txa
;        sta REG_TILEMAP_L1,x
;        inx
;        bne ss


wait_title:
        jsr $FFE4               ; calling KERNAL GETIN 
        cmp #$1b                ; ESC = exit
        beq exit
        cmp #$20                ; SPACE = start
        bne wait_title

        lda #4+2+1+0+32         ; show sprite layer (L2), , show L1 (tiles) and L0 (bitmap)
        sta REG_LAYERS_CFG
        jsr show_game_bmp       ; show moon landscape
        jsr reset_game          ; new game!

WAIT_VSYNC1: 
        lda REG_VSYNC           ; wait till we reach bottom border
        cmp #200
        bne WAIT_VSYNC1

        jsr handle_vsync 

        lda asproffy            ; end of game?
        cmp abump_down
        beq end_game_landed
        lda ahitcnt
        beq end_game_win
        lda shiphit
        bne end_game_shiphit

game_loop:
WAIT_VSYNC2:
        lda REG_VSYNC           ; wait till we left bottom border (in case of!)
        cmp #200
        beq WAIT_VSYNC2
        jmp WAIT_VSYNC1

exit:
        jsr reset_line_scroll

        jsr hide_sprites        ; hide all sprites
        lda #12                 ; command = clear bitmap
        sta REG_TCOMMAND 
        jsr wait_command_done
        lda #11                 ; command = clear tiles
        sta REG_TCOMMAND 
        jsr wait_command_done
        lda #$00                ; clear tiles
        jsr fill_L1_tilemap

        pla                     ; restore GFX mode
        sta REG_BG_COL
        pla                     
        sta REG_LAYERS_CFG        
        pla
        sta REG_VIDEO_MODE
        rts


;-------------------------------------------------------------
end_game_shiphit: 
        lda #$01                 ; background color to blue
        sta REG_BG_COL
        lda #0
        sta shiphit
        dec nblife
        beq end_go 
        jsr reset_ship_and_bullets
        jsr press_space
        jmp game_loop

end_game_landed:        
        lda #$01                 ; background color to blue
        sta REG_BG_COL
end_go:        
        lda #<gameover_text      ; game over!
        sta $54
        lda #>gameover_text
        sta $55
        jsr print
        jsr press_space
        jmp loop_title

end_game_win:        
        lda #$00                 ; background color to black
        sta REG_BG_COL
        jsr press_space
        inc balien_nb
        jsr continue_game        
        jmp game_loop

;-------------------------------------------------------------
reset_game:
        lda #1                  ; initial aliens nb bullets
        sta balien_nb
        lda #3                  ; 3 lifes!
        sta nblife
        lda #0
        sta score
        sta score+1
        sta score+2
        jsr reset_ship_and_bullets        
continue_game:        
        lda #0                  ; ship alive
        sta shiphit        
        lda #ALIENS_BUMP_LEFT   ; Initialize aliens side bumps
        sta abump_left
        lda #ALIENS_BUMP_RIGHT
        sta abump_right
        lda #ALIENS_BUMP_DOWN
        sta abump_down 
        lda #ALIENS_BUMP_UP
        sta asproffy
        lda #0 
        sta asproffx               
        lda #1                  ; move to right first
        sta adir_is_right
        lda #ALIENS_NB          ; aliens hit count
        sta ahitcnt
        lda #1                  ; alien speed cnt
        sta aspeedcnt

        ldx #0                  ; reset aliens ids
reset0:
        lda asprid_reset,x
        sta asprid,x
        inx
        cpx #ALIENS_NB
        bne reset0
        
        ldx #0                  ; reset shields ids
reset1:        
        lda shdids_reset,x
        sta shdids,x
        inx
        cpx #SHIELDS_SIZE
        bne reset1

        ldx #0                  ; reset alien colision bits
reset2:        
        lda acolsbits_reset,x
        sta acolsbits,x
        inx
        cpx #ALIENS_NB_COLS
        bne reset2

        lda #$00                ; background color to black
        sta REG_BG_COL

        jsr clear_L1_tilemap    ; clear screen tiles
        jsr init_starfield
        
        lda #<score_text        ; print score
        sta $54
        lda #>score_text
        sta $55
        jsr print
        rts

;-------------------------------------------------------------
press_space:
        jsr $FFE4               ; calling KERNAL GETIN 
        cmp #$20
        bne press_space
        rts

;-------------------------------------------------------------
read_joystick:
        lda REG_JOYSTICK         ; read joystick
        tay                      ; save to Y

        lda #5                   ; read row 5 of keyboard matrix
        sta $e810                ; we will use it a joystick bits!
        lda $e812                ; no key pressed!
        tax
        and #$02                 ; 'E'
        bne joy0
        tya                      ; is JOY_LEFT
        and #!JOY_LEFT
        tay
joy0:
        txa
        and #$04                 ; 'T'
        bne joy1
        tya                      ; is JOY_RIGHT
        and #!JOY_RIGHT
        tay
joy1:
        txa
        and #$20                 ; 'O'
        bne joy2
        tya                      ; is JOY_FIRE
        and #!JOY_FIRE
        tay
joy2:
        rts

;-------------------------------------------------------------
reset_ship_and_bullets:        
        lda #SHIP_X             ; initialize ship xpos
        sta ssproffx

        ldx #BULLETS_FIRST_ID   ; initialize bullets
ress1:
        lda #0
        sta REG_SPRITE_IND,x
        sta bsprid,x
        inx
        cpx #BULLETS_NB
        bne ress1
        rts

;-------------------------------------------------------------
handle_vsync:
        jsr handle_aliens
        jsr handle_ship
        jsr handle_bullets
        jsr handle_shields
        jsr handle_starfield

        lda score
        ldx #<scored
        ldy #>scored
        jsr tohex
        lda score+1
        ldx #<scored+2
        ldy #>scored+2
        jsr tohex
        lda score+2
        ldx #<scored+4
        ldy #>scored+4
        jsr tohex
        lda #<score_value
        sta $54
        lda #>score_value
        sta $55
        jsr print

handle_input:
        jsr read_joystick       ; joystick bits in Y register
        
        tya
        and #JOY_FIRE           ; ship shoot!
        bne hship1
        lda bsprid
        bne h_end
        lda ssproffx
        adc #6
        sta bsprx
        lda #200
        sta bspry        
        lda #BULLET_SHIP_SPID   ; bullet id
        sta bsprid
hship1:
        tya
        and #JOY_LEFT           ; ship left
        bne hship2
        dec ssproffx
hship2:
        tya
        and #JOY_RIGHT          ; ship right
        bne hship3
        inc ssproffx
hship3:
;        tya
;        and #JOY_UP
;        beq EXIT_PRG
;        tya
;        and #JOY_DOWN
;        beq EXIT_PRG
hship4:

     
h_end:
        rts

;-------------------------------------------------------------
handle_bullets:
        lda bsprid               ; handle ship bullet
        cmp #0                   ; empty, do not handle
        beq hbul2
        lda bspry                ; go up till 0
        cmp #0
        beq hbul0
        dec bspry
        dec bspry        
        jmp hbul1
hbul0:       
        lda #0                   ; reset id when reached
        sta bsprid
hbul1:
        lda bsprid
        sta REG_SPRITE_IND+BULLETS_SHIP_ID
        lda bspry
        sta REG_SPRITE_Y+BULLETS_SHIP_ID
        lda bsprx
        sta REG_SPRITE_XLO+BULLETS_SHIP_ID
hbul2:

        ldx #0                   ; handle all alien bullets
hbul3:
        lda bsprid+1,x           
        cmp #0                   ; empty, do not handle
        beq hbul6
        lda bspry+1,x            ; go down till 200
        cmp #200
        beq hbul4
        inc bspry+1,x
        jmp hbul5
hbul4:       
        lda #0                   ; reset id when reached
        sta bsprid+1,x
hbul5:
        lda bsprid+1,x
        sta REG_SPRITE_IND+BULLETS_ALIEN_ID,x
        lda bspry+1,x
        sta REG_SPRITE_Y+BULLETS_ALIEN_ID,x
        lda bsprx+1,x
        sta REG_SPRITE_XLO+BULLETS_ALIEN_ID,x
hbul6:
        inx
        cpx balien_nb
        bne hbul3



        ldx #0                  ; test collision with ship bullet for all aliens
        ldy #0
        lda #$01                ; aliencol bit
        sta msk+1
hbul8:
        lda asprid,x            ; alien still there?
        beq hbul9
        lda REG_SPRITE_COL_LO+ALIENS_FIRST_ID,x ; has colision with bullet
        and #1                  ; ship bullet = sprite 0, bit0
        beq hbul9
        lda #0                  ; alien and bullet off
        sta bsprid
        sta REG_SPRITE_IND+BULLETS_SHIP_ID
        sta asprid,x
        dec ahitcnt             ; decrement hit counter

        lda #20
        jsr add_to_score


        ; here we check if a full column of alien is gone at extreme sides
        ; then we ajust the bump left and right
        
        lda acolsbits,y
msk:    eor #$01
        sta acolsbits,y

hbul9:        
        iny                     ; next column
        cpy #ALIENS_NB_COLS
        bne hbul10
        ldy #0                  ; wrap around
        lda msk+1               ; next row
        asl
        sta msk+1 
hbul10:        
        inx
        cpx #ALIENS_NB
        bne hbul8

        ldx #0                  ; adjust left bump if a row of aliens empty at left 
        ldy #ALIENS_BUMP_LEFT
hbul11:
        lda acolsbits,x
        bne hbul12
        tya
        sec
        sbc #ALIENS_STEP_X
        tay
        inx 
        cpx #ALIENS_NB_COLS
        bne hbul11
hbul12:
        tya
        sta abump_left


        ldx #ALIENS_NB_COLS-1   ; adjust left bump if a row of aliens empty at right 
        ldy #ALIENS_BUMP_RIGHT
hbul13:
        lda acolsbits,x
        bne hbul14
        tya
        clc
        adc #ALIENS_STEP_X
        tay
        dex 
        bpl hbul13
hbul14:
        tya
        sta abump_right


        lda #ALIENS_BUMP_DOWN   ; adjust bump down if a row of aliens empty at right
        sta abump_down 
        ldx #ALIENS_NB-1        ; start at bottom
        ldy #ALIENS_NB_COLS
        lda #0                  ; counter of dead aliens per row
        sta zeros+1
hbul15:
        lda asprid,x
        bne hbul16
        inc zeros+1
hbul16:
        dey
        bne hbul18
        ldy #ALIENS_NB_COLS     ; end of a row
zeros:  lda #0                  ; dead aliens = ALIENS_NB_COLS?
        cmp #ALIENS_NB_COLS
        bne hbul17
        lda abump_down          ; yes, bump is one row less
        clc
        adc #ALIENS_STEP_Y
        sta abump_down
hbul17:
        lda #0                  ; reset dead aliens per row counter
        sta zeros+1
hbul18:
        dex
        bpl hbul15


        ldy #0                  ; alien bullet random shoots
hbul19:        
        lda bsprid+BULLETS_ALIEN_ID,y 
        bne hbul20
        jsr random
        and #$3f
        cmp #ALIENS_NB
        bpl hbul20
        tax
        lda asprid,x
        beq hbul20
        lda asprx,x
        clc
        adc asproffx
        sta bsprx+BULLETS_ALIEN_ID,y
        lda aspry,x
        clc
        adc asproffy
        sta bspry+BULLETS_ALIEN_ID,y
        lda #BULLET_ALIEN_SPID  ; alien bullet
        sta bsprid+BULLETS_ALIEN_ID,y
hbul20: iny
        cpy balien_nb
        bne hbul19


        ldx #0                  ; test collision alien bullets with ship
hbul21:
        lda REG_SPRITE_COL_LO+BULLETS_ALIEN_ID,x
hbumsk: and #$10                ; ship  = sprite 4, bit4
        
        bne end_game_next_ship
        inx
        cpx balien_nb
        bne hbul21
        rts


end_game_next_ship:
        lda #1
        sta shiphit
        rts

;-------------------------------------------------------------
handle_ship:
        lda #1
        sta REG_SPRITE_IND+SHIP_ID
        lda ssproffx
        sta REG_SPRITE_XLO+SHIP_ID
        lda #SHIP_Y
        sta REG_SPRITE_Y+SHIP_ID        
        rts

;-------------------------------------------------------------
handle_aliens:
        ;inc aspeed
        ;and #1
        ;bne hal 
        ;rts
hal:
        dec aspeedcnt
        lda aspeedcnt
        beq hali0
        rts 

hali0:                    
        lda #ALIENS_NB          ; speed up depending on hit count
        sec
        sbc ahitcnt
        clc              
        lsr
        lsr
        lsr        
        tay
        lda ahitcnt2speedcnt,y
        sta aspeedcnt

        lda abump_right
        sta bumpr+1
        lda abump_left
        sta bumpl+1
        lda asproffy
        sta offy+1
        lda adir_is_right
        bne hali1

        dec asproffx
        lda asproffx
bumpl:  cmp #$00
        bne hali3
        inc asproffx
        jmp hali2
hali1:
        inc asproffx
        lda asproffx
bumpr:  cmp #$00
        bne hali3
        dec asproffx
hali2:
        lda adir_is_right
        eor #1
        sta adir_is_right
        inc asproffy             ; 4 pixels down
        inc asproffy
        inc asproffy
        inc asproffy
hali3:
        lda asproffx
        sta offx+1
        ldx #0
hali4:        
        lda asproffx             ; toggle alien sprite at bit3 rate of x position 
        and #$8
        beq hali5
        lda asprid,x
        beq hali6
        clc
        adc #1
        jmp hali6
hali5:
        lda asprid,x
hali6:
        sta REG_SPRITE_IND+ALIENS_FIRST_ID,x
        lda asprx,x
        clc
offx:   adc #$00        
        sta REG_SPRITE_XLO+ALIENS_FIRST_ID,x
        lda aspry,x
        clc
offy:   adc #$00
        sta REG_SPRITE_Y+ALIENS_FIRST_ID,x
        clc
        inx
        cpx #ALIENS_NB
        bne hali4
        rts


;-------------------------------------------------------------
handle_shields:
        lda bsprid              ; ship bullet hit shields?
        ldx bsprx
        ldy bspry
        jsr shield_hit
        bne hshield1
        sta bsprid
        sta REG_SPRITE_IND+BULLETS_SHIP_ID
hshield1:


        ldx #0                  ; alien bullet hit shields?
hshield2:
        txa
        pha                
        lda bspry+1,x        
        tay
        lda bsprid+1,x
        pha
        lda bsprx+1,x
        tax
        pla
        jsr shield_hit
        bne hshield3
        tay
        pla
        tax
        pha
        tya
        sta bsprid+1,x
hshield3:
        pla
        tax
        inx
        cpx balien_nb
        bne hshield2

        ldx #0                  ; draw shields
hshield5:        
        lda shdids,x
        sta REG_TILEMAP_L1+32*(SHIELDS_Y),x
        inx
        cpx #SHIELDS_SIZE
        bne hshield5 
        rts


shield_hit:
        cmp #0                  ; sprid
        beq shield2
        tya                     ; spry
        cmp #SHIELDS_Y
        bpl shield2
        cmp #SHIELDS_Y+16
        bmi shield2
        sec
        sbc #SHIELDS_Y
        and #$f8
        asl
        asl
        sta shp+1
        txa                     ; sprx
        lsr
        lsr
        lsr
        clc
shp:    adc #00
        tax
        lda shdids,x
        cmp #$20
        beq shield2
        and #1
        bne shield0
        inc shdids,x
        jmp shield1
shield0:
        lda #$20
        sta shdids,x
shield1:        
        lda #0
        rts
shield2:
        lda #1
        rts


;-------------------------------------------------------------
handle_starfield:
        ldx #0
moves0:
        lda starxinc,x
        sta movinc+1
        lda starx,x
movinc: adc #00        
        sta starx,x
        sta REG_LINES_L1_XSCR+STARS_START,x
        inx
        cpx #STARS_NB
        bne moves0
        rts

init_starfield:
        lda #$04
        sta REG_LINES_CFG
        ldx #0
        lda #<REG_TILEMAP_L1+(STARS_START/8)*32
        sta $54
        lda #>REG_TILEMAP_L1+(STARS_START/8)*32
        sta $55
inits1: 
        jsr random
        and #$1f
        tay
        lda #STAR_TID
        sta ($54),y
        jsr random
        and #$1f
        tay
        lda #STAR_TID
        sta ($54),y
        clc
        lda $54
        adc #32
        sta $54
        bcc inits2
        inc $55
inits2:
        inx
        cpx #(STARS_NB/8)
        bne inits1       

        ldx #0
inits3: 
        jsr random
        sta starx,x
        jsr random
        and #$3
        sta starxinc,x
        inx
        cpx #STARS_NB
        bne inits3 
        rts


;-------------------------------------------------------------
random:
        lda seed
        beq doEor
        asl
        beq noEor ;if the input was $80, skip the EOR
        bcc noEor
doEor:    
        eor #$1d
noEor:  sta seed
        rts

;-------------------------------------------------------------
show_title_bmp:
        lda #$0                 ; transfer mode: 8 bits packed
        sta REG_TDEPTH
        lda #8                  ; command = transfer packed bitmap
        sta REG_TCOMMAND
        lda #>(title_bitmap_end-title_bitmap)
        sta REG_TPARAMS
        lda #<(title_bitmap_end-title_bitmap)
        sta REG_TPARAMS


        lda #<title_bitmap       ; lo
        sta $54
        lda #>title_bitmap       ; hi
        sta $55
        ldy #$00
show0:
        lda ($54),y
        sta REG_TDATA
        inc $54
        bne show1
        inc $55
show1:
        lda $55
        cmp #>(title_bitmap_end)
        bne show0
        lda $54
        cmp #<(title_bitmap_end)
        bne show0
        jsr wait_command_done        
        rts

;-------------------------------------------------------------
show_game_bmp:
        lda #$0                 ; transfer mode: 8 bits packed
        sta REG_TDEPTH
        lda #8                  ; command = transfer packed bitmap
        sta REG_TCOMMAND
        lda #>(game_bitmap_end-game_bitmap)
        sta REG_TPARAMS
        lda #<(game_bitmap_end-game_bitmap)
        sta REG_TPARAMS

        lda #<game_bitmap       ; lo
        sta $54
        lda #>game_bitmap       ; hi
        sta $55
        ldy #$00
show2:
        lda ($54),y
        sta REG_TDATA
        inc $54
        bne show3
        inc $55
show3:
        lda $55
        cmp #>(game_bitmap_end)
        bne show2
        lda $54
        cmp #<(game_bitmap_end)
        bne show2
        jsr wait_command_done
        rts

;-------------------------------------------------------------
wait_command_done:
        lda REG_TSTATUS
        bne wait_command_done
        rts

;-------------------------------------------------------------
clear_L1_tilemap:
        lda #$20
fill_L1_tilemap:
        ldx #0
clr:    sta REG_TILEMAP_L1,x
        sta REG_TILEMAP_L1+$100,x
        sta REG_TILEMAP_L1+$200,x
        sta REG_TILEMAP_L1+$300,x
        inx
        bne clr
        rts

;-------------------------------------------------------------
reset_line_scroll:        
        ldx #0                  ; restore per line scrolling
        lda #0
lxscr1:
        sta REG_LINES_L1_XSCR,x
        inx
        cpx #200
        bne lxscr1
        rts


;-------------------------------------------------------------
add_to_score:
        sta aval+1
        sed
        lda score+2
        clc
aval:   adc #0
        sta score+2
        lda score+1
        adc #0
        sta score+1
        lda score
        adc #0
        sta score
        cld
        rts


;-------------------------------------------------------------
print:
        ldy #0                  ; remains 0
print0:                          
        lda ($54),y             ; X coordinate
        pha 
        inc $54
        bne print1
        inc $55
print1:
        lda ($54),y             ; Y coordinate
        tax
        inc $54
        bne print2
        inc $55
print2:
        clc
        lda #<REG_TILEMAP_L1
        adc linelo,x            ; dst lo
        sta addr+1
        lda #>REG_TILEMAP_L1
        adc linehi,x            ; dst hi
        sta addr+2
        pla
        tax                     ; X
print3:
        lda ($54),y
        bmi pr_end
        bne print5
        inc $54
        bne print4
        inc $55
print4:
        jmp print0
print5:
        cmp #65
        bmi addr
        sec
        sbc #64
addr    sta $8000,x
        inx
        inc $54
        bne print6
        inc $55
print6:
        jmp print3
pr_end
        rts

title_lines:
!byte 12,15
!text "10 POINTS"
!byte 0
!byte 12,16
!text "20 POINTS"
!byte 0
!byte 12,17
!text "30 POINTS"
!byte 0
!byte 12,18
!text "40 POINTS"
!byte 0
!byte 6,20
!text "PRESS SPACE TO START"
!byte $ff

gameover_text:
!byte 12,22
!text "GAME OVER"
!byte $ff

score_text:
!byte 0,0
!text "SCORE:"
!byte $ff

score_value:
!byte 6,0
scored:
!text "000000"
!byte $ff

score:
!byte 0,0,0

;-------------------------------------------------------------
initlineoffset:
        lda #$00                ; $0000
        sta $54
        lda #$00
        sta $55
        ldx #00                 ; line #
initl1:        
        lda $54                 ; store lo and hi offset
        sta linelo,x
        lda $55
        sta linehi,x
        clc
        lda $54
rowlen: adc #32
        sta $54
        bcc initl2             
        inc $55          
initl2:
        inx
        cpx #25
        bne initl1
        rts

;-------------------------------------------------------------
linelo:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
linehi:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


;-------------------------------------------------------------
program_tiles:
        lda #1                  ; font (32chars): transfer depth: 1 bit clut
        sta REG_TDEPTH

        lda #<font              ; lo
        sta $54
        lda #>font              ; hi
        sta $55

        ldx #0
font0:        
        lda #1                  ; command = transfer font data
        sta REG_TCOMMAND
        txa
        sta REG_TPARAMS         ; tile id
        lda #8                  
        sta REG_TPARAMS         ; width
        sta REG_TPARAMS         ; height
        ldy #$00
font1:
        lda ($54),y
        sta REG_TDATA
        iny
        cpy #8
        bne font1
        clc
        lda $54                 ; lo             
        adc #8
        sta $54 
        bcc font2        
        inc $55                 ; hi
font2:
        inx
        lda $55
        cmp #>(font_end)
        bne font0
        lda $54
        cmp #<(font_end)
        bne font0

        lda #2                  ; 2 tiles: transfer depth: 2 bit clut
        sta REG_TDEPTH
        lda #$00                ; black for 0
        sta REG_TLOOKUP
        lda #$40+$08+$01        ; grey1 for 1
        sta REG_TLOOKUP+1
        lda #$80+$10+$02        ; grey2 for 2
        sta REG_TLOOKUP+2
        lda #$ff                ; white for 3
        sta REG_TLOOKUP+3

        ldx #$40                ; param = tile id
        ldy #0                  
tiles0:
        lda #1                  ; command = transfer tile
        sta REG_TCOMMAND  
        txa
        sta REG_TPARAMS         ; tile id
        lda #8                  
        sta REG_TPARAMS         ; width
        sta REG_TPARAMS         ; height

        lda tiles2bits_def,y    ; transfer 16 bytes of data
        sta REG_TDATA
        lda tiles2bits_def+1,y
        sta REG_TDATA
        lda tiles2bits_def+2,y
        sta REG_TDATA
        lda tiles2bits_def+3,y
        sta REG_TDATA
        lda tiles2bits_def+4,y
        sta REG_TDATA
        lda tiles2bits_def+5,y
        sta REG_TDATA
        lda tiles2bits_def+6,y
        sta REG_TDATA
        lda tiles2bits_def+7,y
        sta REG_TDATA
        lda tiles2bits_def+8,y
        sta REG_TDATA
        lda tiles2bits_def+9,y
        sta REG_TDATA
        lda tiles2bits_def+10,y
        sta REG_TDATA
        lda tiles2bits_def+11,y
        sta REG_TDATA
        lda tiles2bits_def+12,y
        sta REG_TDATA
        lda tiles2bits_def+13,y
        sta REG_TDATA
        lda tiles2bits_def+14,y
        sta REG_TDATA
        lda tiles2bits_def+15,y
        sta REG_TDATA
        tya
        clc
        adc #16
        tay
        inx
        cpx #$40+2
        bne tiles0

        lda #1                  ; 12 tiles: transfer depth: 1 bit clut
        sta REG_TDEPTH
        lda #$00                ; black for 0
        sta REG_TLOOKUP
        lda #$e0                ; red for 1
        sta REG_TLOOKUP+1
        ldx #SHIELDS_FIRST_TID  ; param = tile id
        ldy #0                  
tiles1:
        lda #1                  ; command = transfer tile
        sta REG_TCOMMAND  
        txa
        sta REG_TPARAMS         ; tile id
        lda #8                  
        sta REG_TPARAMS         ; width
        sta REG_TPARAMS         ; height

        lda tiles1bits_def,y    ; transfer 8 bytes of data
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny
        lda tiles1bits_def,y
        sta REG_TDATA
        iny

        inx
        cpx #SHIELDS_FIRST_TID+12
        bne tiles1
        rts


;-------------------------------------------------------------
program_sprites:
        lda #1                   ; transfer depth: 1 bit clut
        sta REG_TDEPTH
        lda #$0                  ; black for 0
        sta REG_TLOOKUP
        lda #$ff                 ; white for 1
        sta REG_TLOOKUP+1

        ldx #0                   ; id 0
        lda #<sprite_empty
        sta $54
        lda #>sprite_empty
        sta $55
        jsr sprite16by8_1bit
        
        ldx #1                   ; id 1
        lda #<sprite_ship
        sta $54
        lda #>sprite_ship
        sta $55
        ldy #13
        jsr spriteNby8_1bit

        lda #$fc                 ; yellow for 1
        sta REG_TLOOKUP+1                
        ldx #2                   ; id 2
        lda #<sprite_alien1_1
        sta $54
        lda #>sprite_alien1_1
        sta $55
        jsr sprite16by8_1bit
        ldx #3                   ; id 3
        lda #<sprite_alien1_2
        sta $54
        lda #>sprite_alien1_2
        sta $55
        jsr sprite16by8_1bit

        lda #$1f                 ; cyan for 1
        sta REG_TLOOKUP+1                
        ldx #4                   ; id 4
        lda #<sprite_alien2_1
        sta $54
        lda #>sprite_alien2_1
        sta $55
        jsr sprite16by8_1bit
        ldx #5                   ; id 5
        lda #<sprite_alien2_2
        sta $54
        lda #>sprite_alien2_2
        sta $55
        jsr sprite16by8_1bit

        lda #$e3                 ; pink for 1
        sta REG_TLOOKUP+1                
        ldx #6                   ; id 6
        lda #<sprite_alien3_1
        sta $54
        lda #>sprite_alien3_1
        sta $55
        jsr sprite16by8_1bit
        ldx #7                   ; id 7
        lda #<sprite_alien3_2
        sta $54
        lda #>sprite_alien3_2
        sta $55
        jsr sprite16by8_1bit

        lda #$e0                 ; red for 1
        sta REG_TLOOKUP+1                
        ldx #8                   ; id 8
        lda #<sprite_alien_exp
        sta $54
        lda #>sprite_alien_exp
        sta $55
        jsr sprite16by8_1bit

        ldx #9                   ; id 9
        lda #<sprite_saucer
        sta $54
        lda #>sprite_saucer
        sta $55
        jsr sprite16by8_1bit
        
        lda #$ff                 ; white for 1
        sta REG_TLOOKUP+1                
        ldx #BULLET_SHIP_SPID    ; id 10
        lda #<sprite_bullet1
        sta $54
        lda #>sprite_bullet1
        sta $55
        ldy #1
        jsr spriteNby8_1bit        
        ldx #BULLET_ALIEN_SPID   ; id 11
        lda #<sprite_bullet2
        sta $54
        lda #>sprite_bullet2
        sta $55
        ldy #2
        jsr spriteNby8_1bit        
        rts

;-------------------------------------------------------------
hide_sprites:
        ldy #0                    ; Hide all sprites available
hspr1:
        lda #$0
        sta REG_SPRITE_IND,y
        sta REG_SPRITE_XHI,y
        sta REG_SPRITE_XLO,y
        lda #200
        sta REG_SPRITE_Y,y
        iny
        cpy #NB_SPRITES_MAX
        bne hspr1
        rts

;-------------------------------------------------------------
sprite16by8_1bit:   
        ldy #16                 ; width = 16       
spriteNby8_1bit:   
        lda #2                  ; command = transfer sprite
        sta REG_TCOMMAND 
        txa                     ; param = sprite id
        sta REG_TPARAMS
        tya                     ; width
        sta REG_TPARAMS 
        lda #8                  ; height
        sta REG_TPARAMS
        ldy #$00                ; transfer 2*8 bytes of data
sprite11:
        lda ($54),y
        sta REG_TDATA
        iny
        cpy #2*8
        bne sprite11
        
        rts

;-------------------------------------------------------------
tohex:
        stx hexd0+1 
        inx
        stx hexd1+1 
        sty hexd0+2
        sty hexd1+2
        tax
        lsr
        lsr
        lsr
        lsr
        tay
        lda hex,y
hexd0:  sta $8000
        txa
        and #$f
        tay
        lda hex,y
hexd1:  sta $8001

        rts

;-------------------------------------------------------------
; Aliens data

asprx:
!byte 0*ALIENS_STEP_X,1*ALIENS_STEP_X,2*ALIENS_STEP_X,3*ALIENS_STEP_X,4*ALIENS_STEP_X,5*ALIENS_STEP_X,6*ALIENS_STEP_X,7*ALIENS_STEP_X,8*ALIENS_STEP_X,9*ALIENS_STEP_X,10*ALIENS_STEP_X
!byte 0*ALIENS_STEP_X,1*ALIENS_STEP_X,2*ALIENS_STEP_X,3*ALIENS_STEP_X,4*ALIENS_STEP_X,5*ALIENS_STEP_X,6*ALIENS_STEP_X,7*ALIENS_STEP_X,8*ALIENS_STEP_X,9*ALIENS_STEP_X,10*ALIENS_STEP_X
!byte 0*ALIENS_STEP_X,1*ALIENS_STEP_X,2*ALIENS_STEP_X,3*ALIENS_STEP_X,4*ALIENS_STEP_X,5*ALIENS_STEP_X,6*ALIENS_STEP_X,7*ALIENS_STEP_X,8*ALIENS_STEP_X,9*ALIENS_STEP_X,10*ALIENS_STEP_X
!byte 0*ALIENS_STEP_X,1*ALIENS_STEP_X,2*ALIENS_STEP_X,3*ALIENS_STEP_X,4*ALIENS_STEP_X,5*ALIENS_STEP_X,6*ALIENS_STEP_X,7*ALIENS_STEP_X,8*ALIENS_STEP_X,9*ALIENS_STEP_X,10*ALIENS_STEP_X
!byte 0*ALIENS_STEP_X,1*ALIENS_STEP_X,2*ALIENS_STEP_X,3*ALIENS_STEP_X,4*ALIENS_STEP_X,5*ALIENS_STEP_X,6*ALIENS_STEP_X,7*ALIENS_STEP_X,8*ALIENS_STEP_X,9*ALIENS_STEP_X,10*ALIENS_STEP_X

aspry:
!byte 0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y,0*ALIENS_STEP_Y
!byte 1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y,1*ALIENS_STEP_Y
!byte 2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y,2*ALIENS_STEP_Y
!byte 3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y,3*ALIENS_STEP_Y
!byte 4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y,4*ALIENS_STEP_Y

asprid:
!byte 2,2,2,2,2,2,2,2,2,2,2
!byte 4,4,4,4,4,4,4,4,4,4,4
!byte 4,4,4,4,4,4,4,4,4,4,4
!byte 6,6,6,6,6,6,6,6,6,6,6
!byte 6,6,6,6,6,6,6,6,6,6,6

asprid_reset:
!byte 2,2,2,2,2,2,2,2,2,2,2
!byte 4,4,4,4,4,4,4,4,4,4,4
!byte 4,4,4,4,4,4,4,4,4,4,4
!byte 6,6,6,6,6,6,6,6,6,6,6
!byte 6,6,6,6,6,6,6,6,6,6,6

acolsbits:
!byte $1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f

acolsbits_reset:
!byte $1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f

asproffx:
!byte 0

asproffy:
!byte 40

abump_left:
!byte 0

abump_right:
!byte 0

abump_down:
!byte 0

adir_is_right:
!byte 1

aspeed:
!byte 0

ahitcnt:
!byte 0

aspeedcnt:
!byte 0

ahitcnt2speedcnt
!byte 7,6,5,4,3,2,1,1

;-------------------------------------------------------------
; Ship data

ssproffx:
!byte 0

shiphit:
!byte 0

nblife:
!byte 0

joystick:
!byte 0

;-------------------------------------------------------------
; Bullets data

bsprx:
!byte 0,0,0,0,0

bspry:
!byte 0,0,0,0,0

bsprid:
!byte 0,0,0,0,0

balien_nb:
!byte 1

;-------------------------------------------------------------
; Shields data

shdids:
!byte $20,$20,$20,$20,$20,$20,$20,$42,$44,$46,$20,$20,$42,$44,$46,$20,$20,$42,$44,$46,$20,$20,$42,$44,$46,$20,$20,$20,$20,$20,$20,$20
!byte $20,$20,$20,$20,$20,$20,$20,$48,$4a,$4c,$20,$20,$48,$4a,$4c,$20,$20,$48,$4a,$4c,$20,$20,$48,$4a,$4c,$20,$20,$20,$20,$20,$20,$20

shdids_reset:
!byte $20,$20,$20,$20,$20,$20,$20,$42,$44,$46,$20,$20,$42,$44,$46,$20,$20,$42,$44,$46,$20,$20,$42,$44,$46,$20,$20,$20,$20,$20,$20,$20
!byte $20,$20,$20,$20,$20,$20,$20,$48,$4a,$4c,$20,$20,$48,$4a,$4c,$20,$20,$48,$4a,$4c,$20,$20,$48,$4a,$4c,$20,$20,$20,$20,$20,$20,$20

;-------------------------------------------------------------
; Starfield data

starx:
!fill STARS_NB,0
starxinc:
!fill STARS_NB,0

;-------------------------------------------------------------
; Other data
seed: 
!byte $23

;-------------------------------------------------------------
; Debug data

hex:
!byte $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
!byte $01,$02,$03,$04,$05,$06

;-------------------------------------------------------------
; Sprites definition

sprite_empty:
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000

sprite_alien1_1:
!byte %00000001,%10000000
!byte %00000011,%11000000
!byte %00000111,%11100000
!byte %00001101,%10110000
!byte %00001111,%11110000
!byte %00000010,%01000000
!byte %00000101,%10100000
!byte %00001010,%01010000
sprite_alien1_2:
!byte %00000001,%10000000
!byte %00000011,%11000000
!byte %00000111,%11100000
!byte %00001101,%10110000
!byte %00001111,%11110000
!byte %00000101,%10100000
!byte %00001001,%10010000
!byte %00000100,%00100000

sprite_alien2_1:
!byte %00000100,%00010000
!byte %00010010,%00100100
!byte %00010111,%11110100
!byte %00011101,%11011100
!byte %00011111,%11111100
!byte %00001111,%11111000
!byte %00000100,%00010000
!byte %00001000,%00001000
sprite_alien2_2:
!byte %00000100,%00010000
!byte %00000010,%00100000
!byte %00000111,%11110000
!byte %00001101,%11011000
!byte %00011111,%11111100
!byte %00010111,%11110100
!byte %00010100,%00010100
!byte %00000011,%01100000

sprite_alien3_1:
!byte %00000011,%11000000
!byte %00011111,%11111000
!byte %00111111,%11111100
!byte %00111001,%10011100
!byte %00111111,%11111100
!byte %00000110,%01100000
!byte %00001101,%10110000
!byte %00110000,%00001100
sprite_alien3_2:
!byte %00000011,%11000000
!byte %00011111,%11111000
!byte %00111111,%11111100
!byte %00111001,%10011100
!byte %00111111,%11111100
!byte %00001110,%01110000
!byte %00011001,%10011000
!byte %00001100,%00110000

sprite_alien_exp:
!byte %00000100,%01000000
!byte %00100010,%10001000
!byte %00010000,%00010000
!byte %00001000,%00100000
!byte %01100000,%00001100
!byte %00001000,%00100000
!byte %00010010,%10010000
!byte %00100100,%01001000

sprite_ship:
!byte %00000010,%00000000
!byte %00000111,%00000000
!byte %00000111,%00000000
!byte %01111111,%11110000
!byte %11111111,%11111000
!byte %11111111,%11111000
!byte %11111111,%11111000
!byte %11111111,%11111000

sprite_saucer:
!byte %00000000,%00000000
!byte %00000111,%11100000
!byte %00011111,%11111000
!byte %00111111,%11111100
!byte %01101101,%10110110
!byte %11111111,%11111111
!byte %00111000,%00011100
!byte %00010000,%00001000

sprite_bullet1:
!byte %10000000,%00000000
!byte %10000000,%00000000
!byte %10000000,%00000000
!byte %10000000,%00000000
!byte %10000000,%00000000
!byte %10000000,%00000000
!byte %10000000,%00000000
!byte %10000000,%00000000

sprite_bullet2:
!byte %01000000,%00000000
!byte %10000000,%00000000
!byte %01000000,%00000000
!byte %10000000,%00000000
!byte %01000000,%00000000
!byte %10000000,%00000000
!byte %01000000,%00000000
!byte %10000000,%00000000


;-------------------------------------------------------------
; Tiles definition

tiles2bits_def:
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000
!byte %00000000,%00000000

!byte %10000000,%00000000
!byte %01000000,%00000000
!byte %11000000,%00000000
!byte %10000000,%00000000
!byte %01000000,%00000000
!byte %11000000,%00000000
!byte %10000000,%00000000
!byte %01000000,%00000000

tiles1bits_def:
!byte %00001111
!byte %00011111
!byte %00111111
!byte %01111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111

!byte %00001011
!byte %00010101
!byte %00111111
!byte %01101101
!byte %10101100
!byte %10110011
!byte %11001101
!byte %10011110

!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111

!byte %11110111
!byte %10011001
!byte %11110111
!byte %11011111
!byte %11110111
!byte %11101111
!byte %10100101
!byte %11101111


!byte %11000000
!byte %11100000
!byte %11110000
!byte %11111000
!byte %11111100
!byte %11111100
!byte %11111100
!byte %11111100

!byte %10000000
!byte %01000000
!byte %11010000
!byte %10111000
!byte %11101100
!byte %11111100
!byte %10101000
!byte %01001100


!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111110
!byte %11111100
!byte %11111000
!byte %11111000

!byte %11001101
!byte %10100111
!byte %11100111
!byte %10111111
!byte %11001110
!byte %10110100
!byte %11011000
!byte %01001000


!byte %11111111
!byte %11111111
!byte %11111111
!byte %11111111
!byte %00000011
!byte %00000001
!byte %00000000
!byte %00000000

!byte %01001101
!byte %10111011
!byte %11101111
!byte %11011011
!byte %00000010
!byte %00000001
!byte %00000000
!byte %00000000


!byte %11111100
!byte %11111100
!byte %11111100
!byte %11111100
!byte %11111100
!byte %11111100
!byte %11111100
!byte %11111100

!byte %11001000
!byte %11011000
!byte %11101000
!byte %11111100
!byte %11101000
!byte %11001100
!byte %10110100
!byte %01011100



title_bitmap:
!bin "si.cru"
title_bitmap_end:

game_bitmap:
!bin "lunar.cru"
game_bitmap_end:

font:
!bin "ryd.fnt"
font_end: