!to "si.prg"


*= $0401
        * = $0401
        !word bas_end
        !word $00
        !byte $9e
        !text "2048"
        !byte $00
bas_end !word $00

; Graphics
; tile/text map
REG_TEXTMAP_L1    = $8000
REG_TILEMAP_L1    = $8800
REG_TILEMAP_L0    = $9000

; sprite
REG_SPRITE_IND    = $9800
REG_SPRITE_XHI    = $9880
REG_SPRITE_XLO    = $9900
REG_SPRITE_Y      = $9980

; mode
REG_VIDEO_MODE    = $9b00
; 0-1: resolution (0=64$200,1=32$200,2=256x200)

; bg/text color
REG_BG_COL        = $9b01
; RGB332
REG_FG_COL        = $9b0d
; RGB332

; layers config
REG_LAYERS_CFG    = $9b02
; 0: L0 on/off
; 1: L1 on/off    (off if HIRES and bitmap in L0!)
; 2: L2 on/off
; 3: L2 inbetween
; 4: bitmap/tile in L0
; 5: petfont/tile in L1
; 6: enable scroll area in L0
; 7: enable scroll area in L1
REG_TILES_CFG     = $9b0e
; 0: 0=8x8tile, 1=16x16tiles

; lines config
REG_LINES_CFG     = $9b03
; 0: single/perline background color
; 1: single/perline L0 xscroll
; 2: single/perline L1 xscroll

; layer scroll
REG_XSCROLL_HI    = $9b04
; 3-0: L0 xscroll hi
; 7-4: L1 xscroll hi
REG_XSCROLL_L0    = $9b05
REG_XSCROLL_L1    = $9b06
REG_YSCROLL_L0    = $9b07
REG_YSCROLL_L1    = $9b08
; scroll area
REG_SC_START_L0   = $9b09
REG_SC_END_L0     = $9b0a
REG_SC_START_L1   = $9b0b
REG_SC_END_L1     = $9b0c
; 4-0

; tiles config
REG_TILES_CFG     = $9b0e
; 0: L0: 0=8x8, 1=16x16
; 1: L1: 0=8x8, 1=16x16
; 2-4: xcurtain left
;  0: on/off
;  1: 8/16 pixels
; 5-7: ycurtain top
;  0: on/off
;  1: 8/16 pixels
;
; vsync line (0-200, 200 is overscan)
REG_VSYNC         = $9b0f
;
; data transfer
REG_TLOOKUP       = $9a00
REG_TDEPTH        = $9b10
; 1/2/4/8 bits per pixel (using indexed CLUT)
; 9 = 8 bits RGB332 no CLUT
; 0 = compressed
REG_TCOMMAND      = $9b11
; 1: transfer tiles data      (data=tilenr,64/packet pixels)
; 2: transfer sprites data    (data=spritenr,384/packet pixels)
; 3: transfer bitmap data     (data=xh,xl,y,wh,wl,h,w*h/packet pixels) 
; 4: transfer t/fmap col data (data=layer,col,row,size,size/packet tiles)
; 5: transfer t/fmap row data (data=layer,col,row,size,size/packet tiles)
REG_TPARAMS       = $9b12
REG_TDATA         = $9b13

; lines background color / scroll (200 values)
REG_LINES_BG_COL  = $9b38
; RGB332
REG_LINES_XSCR_HI = $9c00
; 7-4:  lines L1 xscroll hi, 3-0: L0 xscroll hi
REG_LINES_L0_XSCR = $9cc8
REG_LINES_L1_XSCR = $9d90

; Audio
; SID (see C64)
REG_SID_BASE      = $9f00


ROW_NB                  = 25
ROW_START               = 0
ROW_END                 = (ROW_NB-1)

NB_SPRITES_TOTAL        = 96

*= $0800
        lda #2                  ; 256x200 (32x25)
        sta REG_VIDEO_MODE
        lda #0                  ; black background
        sta REG_BG_COL

        ldx #$00                ; clear screen L1 (text)
        lda #32
clr_l1:
        sta REG_TEXTMAP_L1,x
        sta REG_TEXTMAP_L1+$100,x
        sta REG_TEXTMAP_L1+$200,x
        sta REG_TEXTMAP_L1+$300,x
        dex
        bne clr_l1

        ldx #$00                ; clear screen L0 (tile)
        ldy #$00
        lda #0
clr_l0:
        sta REG_TILEMAP_L0,x
        sta REG_TILEMAP_L0+$100,x
        sta REG_TILEMAP_L0+$200,x
        sta REG_TILEMAP_L0+$300,x        
        iny
        dex
        bne clr_l0

        lda #ROW_START          ; define scroll area 
        sta REG_SC_START_L0
        lda #ROW_END
        sta REG_SC_END_L0
        lda #$4                 ; tile config (8x8,8pix curtain left)
        sta REG_TILES_CFG        
        lda #$57                ; L0+L1, TILES + L2 sprites
        ;lda #6
        sta REG_LAYERS_CFG
        lda #$00
        sta REG_LINES_CFG
        lda #$00
        sta REG_XSCROLL_HI      ; not used   
        
        jsr remap_megatiles

        lda #9                   ; transfer mario: 8 bits no clut
        sta REG_TDEPTH
        ldx #$00                 ; id 0
        lda #<sprite_mario
        sta $54
        lda #>sprite_mario
        sta $55
        jsr sprite8bits

        jsr spriteshide

        lda #$00                 ; Put mario in middle    
        sta REG_SPRITE_IND
        sta REG_SPRITE_XHI
        lda #128
        sta REG_SPRITE_XLO
        lda #100
        sta REG_SPRITE_Y

        ;jsr show_megatiles

restart:
        ; initialize scrolling
        lda #<map               ; mappt lo
        sta $54
        lda #>map               ; mappt hi
        sta $55
        lda #0                  ; initial scrollx value
        sta scrollx
        sta scr_col             ; and next screen col to update

        ldy #0                  ; draw 32 screen columns from the map
initmap:
        tya
        sta savey
        jsr draw_col_left_tiles
        lda savey
        tay
        iny
        tya
        sta savey
        jsr draw_col_right_tiles
        lda savey
        tay
        iny
        jsr map_next_col        
        cpy #32
        bne initmap

        lda $90                 ; install VBL irq
        sta $033d
        lda $90+1
        sta $033d+1
        lda #0
        sta $033c
        sei
        lda #<newirq
        sta $90
        lda #>newirq
        sta $90+1
        cli

WAIT_KEY
        jsr $FFE4               ; Calling KERNAL GETIN 
        beq WAIT_KEY
        cmp #$20                ; space to exit else restart
        beq exit
        jsr restore_int
        jmp restart
exit:    
        lda #$03                ; Petfont + bitmap + no sprites
        sta REG_LAYERS_CFG
        lda #$00                ; Reset tile config
        sta REG_TILES_CFG        
        lda #$00                ; Scroll
        sta REG_XSCROLL_HI      
        sta REG_XSCROLL_L0      
        sta REG_XSCROLL_L1      
        lda #0                  ; 640x200
        sta REG_VIDEO_MODE
        jsr spriteshide
restore_int:
        sei
        lda $033d
        sta $90
        lda $033d+1
        sta $90+1
        cli
        rts

;-------------------------------------------------------------
spriteshide:
        ldy #NB_SPRITES_TOTAL-1 ; Hide sprites available
clrsp:
        lda #$00
        sta REG_SPRITE_IND,y
        sta REG_SPRITE_XHI,y
        sta REG_SPRITE_XLO,y
        lda #200
        sta REG_SPRITE_Y,y
        dey
        bpl clrsp
        rts

;-------------------------------------------------------------
; smb 4 tile palettes (RGB442)
; $93,$94,$0C,$00
; $93,$FB,$64,$00
; $93,$FF,$73,$00
; $93,$D0,$64,$00

; Set 4 tiles of the megatile (y) according to palette (0,1,2,3) and set palette
tilepalette0:
        lda Palette0_MTiles,y   ; source tile NR
        sta subtile0
        lda Palette0_MTiles+1,y
        sta subtile1
        lda Palette0_MTiles+2,y
        sta subtile2
        lda Palette0_MTiles+3,y
        sta subtile3
        lda #$93
        sta REG_TLOOKUP
        lda #$94
        sta REG_TLOOKUP+1
        lda #$0C
        sta REG_TLOOKUP+2
        lda #$00
        sta REG_TLOOKUP+3
        rts

tilepalette1:
        lda Palette1_MTiles,y   ; source tile NR
        sta subtile0
        lda Palette1_MTiles+1,y
        sta subtile1
        lda Palette1_MTiles+2,y
        sta subtile2
        lda Palette1_MTiles+3,y
        sta subtile3
        sta subtile3
        lda #$93
        sta REG_TLOOKUP
        lda #$fb
        sta REG_TLOOKUP+1
        lda #$64
        sta REG_TLOOKUP+2
        lda #$00
        sta REG_TLOOKUP+3        
        rts

tilepalette2:
        lda Palette2_MTiles,y   ; source tile NR
        sta subtile0
        lda Palette2_MTiles+1,y
        sta subtile1
        lda Palette2_MTiles+2,y
        sta subtile2
        lda Palette2_MTiles+3,y
        sta subtile3
        sta subtile3
        lda #$93
        sta REG_TLOOKUP
        lda #$ff
        sta REG_TLOOKUP+1
        lda #$73
        sta REG_TLOOKUP+2
        lda #$00
        sta REG_TLOOKUP+3
        rts

tilepalette3:
        lda Palette3_MTiles,y   ; source tile NR
        sta subtile0
        lda Palette3_MTiles+1,y
        sta subtile1
        lda Palette3_MTiles+2,y
        sta subtile2
        lda Palette3_MTiles+3,y
        sta subtile3
        sta subtile3
        lda #$93
        sta REG_TLOOKUP
        lda #$d4
        sta REG_TLOOKUP+1
        lda #$64
        sta REG_TLOOKUP+2
        lda #$00
        sta REG_TLOOKUP+3
        rts

;-------------------------------------------------------------
; Go from 8bit megatiles indices (7-6=palette, 5-0=index) 
; to 6bit palettized ones (tiles pre-colorized)

remap_megatiles:
; build mtile conversion table
; loop in the all map and collect existing mtile indices
; make counter 1 if mtile is used
        lda #<map               ; lo
        sta $54
        lda #>map               ; hi
        sta $55
        ldy #$00
cloop:
        lda ($54),y
        tax
        lda mtilescount,x
        bne cloop1
        inc mtilescount,x
cloop1:
        clc
        lda $54                 ; lo
        adc #1
        sta $54                 ; hi
        bcc cloop2
        inc $55
cloop2:
        clc
        lda $54
        cmp #<mapend            ; lo
        bne cloop
        lda $55                 ; hi
        cmp #>mapend
        bne cloop

; make mtilescount as the mtile lookup table

        ldx #$00
        ldy #$01
luloop:        
        lda mtilescount,x
        beq luloop1
        tya
        asl
        asl
        sta mtilescount,x       ; new tile index * 4 for fast lookup
        iny
luloop1:
        inx
        bne luloop


;        ldx #$00                ; Visualize tiles count in L1 
;ddi
;        lda mtilescount,x
;        sta $8200,x
;        inx
;        bne ddi

; loop in the built table
; for used mtiles, build mtile conversion table starting from 0
; - convert src mtile 4 subtiles index to new indexes
; - convert subtiles data according to the mtile palette
        lda #2                  ; transfer mode: 2 bits => 4 first colours of palette
        sta REG_TDEPTH

        jsr tilepalette0        ; megatile 0 is remapped to index 0
        ldx #0                  ; dst megatile index
        ldy #$24
        jsr duptiledata2bits
        inx
        ldy #$24
        jsr duptiledata2bits
        inx
        ldy #$24
        jsr duptiledata2bits
        inx
        ldy #$24
        jsr duptiledata2bits

        lda #4                  ; dst megatile index * 4
        sta dstsubtile
        ldx #$00
tileloop:        
        lda mtilescount,x
        cmp #0
        beq skiptile
        txa
        and #$3f                ; original tile index
        asl                     ; *4
        asl
        tay
        txa                     ; palette index (0-3) in 2 MSB 
        lsr                     ; >> 6
        lsr
        lsr
        lsr
        lsr
        lsr
        cmp #0
        bne tpal1
        jsr tilepalette0
        jmp tcopy       
tpal1:
        cmp #1
        bne tpal2
        jsr tilepalette1
        jmp tcopy 
tpal2:
        cmp #2
        bne tpal3
        jsr tilepalette2
        jmp tcopy
tpal3:
        jsr tilepalette3
tcopy:
        txa                     ; save X
        sta savex
        lda dstsubtile
        tax
        lda subtile0
        tay
        jsr duptiledata2bits
        inc dstsubtile
        lda dstsubtile
        tax
        lda subtile1
        tay
        jsr duptiledata2bits
        inc dstsubtile
        lda dstsubtile
        tax
        lda subtile2
        tay
        jsr duptiledata2bits
        inc dstsubtile
        lda dstsubtile
        tax
        lda subtile3
        tay
        jsr duptiledata2bits
        inc dstsubtile        
        lda savex               ; restore x
        tax
skiptile:        
        inx
        bne tileloop
        rts

;-------------------------------------------------------------
show_megatiles:
        ldx #$00                ; fill screen L0 with megatiles (2x2)
        ldy #$00                ; row 0 (+16 tiles)
put4_1:
        txa
        sta $9000,y
        adc #2
        sta $9001,y
        inx
        txa        
        sta $9000+32,y
        adc #2
        sta $9001+32,y
        iny
        iny
        inx
        inx
        inx
        txa
        cmp #64
        bne put4_1
        ldy #$00
put4_2:
        txa                     ; row 1 (+16 tiles)
        sta $9000+64,y
        adc #2
        sta $9001+64,y
        inx
        txa        
        sta $9000+96,y
        adc #2
        sta $9001+96,y
        iny
        iny
        inx
        inx
        inx
        txa
        cmp #128
        bne put4_2
        ldy #$00        
put4_3:
        txa                     ; row 2 (+16 tiles)
        sta $9000+128,y
        adc #2
        sta $9001+128,y
        inx
        txa        
        sta $9000+160,y
        adc #2
        sta $9001+160,y
        iny
        iny
        inx
        inx
        inx
        txa
        cmp #192
        bne put4_3
        rts

;$b4,$b6,$b5,$b7 
;        lda #$b4
;        sta $9000
;        lda #$b6
;        sta $9000+32
;        lda #$b5   
;        sta $9001
;        lda #$b7
;        sta $9001+32

;-------------------------------------------------------------
newirq:

; handles the horizontal scrolling
        lda map_col             ; end of map?
        cmp #222
        beq scroll_end

        lda scr_delay           ; scroll ldelay ellapsed?
        ;adc #1
        ;sta scr_delay
        ;and #$01
        bne scroll_end

        lda scr_col             ; current screen column in y
        tay
        lda scrollx             ; update a screen column ?
        and #$f
        bne scroll0
        jsr draw_col_left_tiles ; update with left part of megatile if 0
        jmp scroll1
scroll0:
        cmp #8
        bne scroll2
        jsr draw_col_right_tiles ; update with right part of megatile if 8
scroll1:
        jsr scr_next_col
        jmp scroll3
scroll2:
        cmp #$f
        bne scroll3
        jsr map_next_col

scroll3:
        lda scrollx             ; increment scroll, wrap arround 256
        adc #$1
        sta scrollx
        sta REG_XSCROLL_L0  

scroll_end:
        jmp ($033d)


scr_next_col:
        inc scr_col             ; next column with wrap arround
        lda scr_col
        cmp #32
        bne scr1
        lda #0
        sta scr_col
scr1:   rts 

map_next_col:
        inc map_col
        clc                     ; next row
        lda $54                 ; lo
        adc #13
        sta $54
        lda $55                 ;hi
        adc #00
        sta $55 
        rts

draw_col_left_tiles:
        lda #9                  ; transfer mode: 8bits, no lut
        sta REG_TDEPTH
        lda #4                  ; command = transfer row
        sta REG_TCOMMAND
        lda #0                  ; L0 TILE
        sta REG_TPARAMS
        tya                     ; col
        sta REG_TPARAMS        
        lda #0                  ; row        
        sta REG_TPARAMS              
        lda #ROW_NB             ; height
        sta REG_TPARAMS
        ldy #0
left0:  lda ($54),y
        tax
        lda mtilescount,x
        sta REG_TDATA
        adc #1
        sta REG_TDATA
        iny
        cpy #ROW_NB/2
        bne left0
        lda ($54),y
        tax
        lda mtilescount,x
        sta REG_TDATA
        rts


draw_col_right_tiles:
        lda #9                  ; transfer mode: 8bits, no lut
        sta REG_TDEPTH
        lda #4                  ; command = transfer row
        sta REG_TCOMMAND
        lda #0                  ; L0 TILE
        sta REG_TPARAMS
        tya                     ; col
        sta REG_TPARAMS        
        lda #0                  ; row        
        sta REG_TPARAMS              
        lda #ROW_NB             ; height
        sta REG_TPARAMS
        ldy #0
right0: lda ($54),y
        tax
        lda mtilescount,x
        clc
        adc #2
        sta REG_TDATA
        adc #1
        sta REG_TDATA
        iny
        cpy #ROW_NB/2
        bne right0
        lda ($54),y
        tax
        lda mtilescount,x
        clc
        adc #2
        sta REG_TDATA
        rts

;-------------------------------------------------------------
tile2bits     
        lda #1                  ; command = transfer tile
        sta REG_TCOMMAND 
        txa                     ; param = tile id
        sta REG_TPARAMS
        lda #8
        sta REG_TPARAMS 
        sta REG_TPARAMS        
        ldy #$00
tile20:
        lda ($54),y
        sta REG_TDATA
        iny
        tya
        cmp #16
        bne tile20
        rts

;-------------------------------------------------------------
sprite2bits     
        lda #2                  ; command = transfer sprite
        sta REG_TCOMMAND 
        txa                     ; param = sprite id
        sta REG_TPARAMS
        lda #16
        sta REG_TPARAMS 
        lda #24
        sta REG_TPARAMS
        ldy #$00
sprite20:
        lda ($54),y
        sta REG_TDATA
        iny
        cpy #96
        bne sprite20
        rts

;-------------------------------------------------------------
sprite8bits     
        lda #2                  ; command = transfer sprite
        sta REG_TCOMMAND 
        txa                     ; param = sprite id
        sta REG_TPARAMS
        lda #16
        sta REG_TPARAMS 
        lda #24
        sta REG_TPARAMS
        lda $54
        pha
        lda $55
        pha
        ldy #$00
sprite80:
        lda ($54),y
        sta REG_TDATA
        iny
        bne sprite80
        inc $55
sprite81:
        lda ($54),y
        sta REG_TDATA
        iny
        cpy #128
        bne sprite81
        pla 
        sta $55
        pla
        sta $54
        rts

;-------------------------------------------------------------
duptiledata2bits:
; compute src tile (y) data adress in ($54)
; y has the src tile index
; x had the dst tile index
        lda #$00                ; y*16 + #tiles
        sta $55
        tya                     
        asl
        rol $55
        asl
        rol $55
        asl
        rol $55
        asl
        rol $55
        sta $54
        clc
        lda $54
        adc #<tiles
        sta $54
        lda $55
        adc #>tiles
        sta $55
        jsr tile2bits
        rts

;-------------------------------------------------------------
transfer_sprites2bits:
        lda #2                   ; transfer mode: 2 bits => 4 first colours of palette
        sta REG_TDEPTH
        ldx #$00
        lda #<sprites
        sta $54
        lda #>sprites
        sta $55
sp1:
        jsr sprite2bits
        clc
        lda $54
        adc #64
        sta $54
        bcc sp2             
        inc $55  
sp2:
        inx
        txa
        cmp #64
        bne sp1
        rts  

;-------------------------------------------------------------
transfer_sprites8bits:
        lda #9                   ; transfer mode: 8 bits no clut
        sta REG_TDEPTH
        ldx #$00
        lda #<sprites
        sta $54
        lda #>sprites
        sta $55
sp3:
        jsr sprite8bits
        clc
        lda $54
        adc #128
        sta $54
        lda $55
        adc #1            
        sta $55  
sp4:
        inx
        txa
        cmp #64
        bne sp3
        rts

;-------------------------------------------------------------
palette
;     black, red,  green, blue, cyan(G+B), magenta(R+B), yellow(G+R), white
!byte  $93,$FB,$64,$00
;!byte $93,$94,$0C,$00,$93,$FB,$64,$00,$93,$FF,$73,$00,$93,$D0,$64,$00
;0x89,0x87,0xff
!byte $00,   $e0,  $1c,   $03,  $1f,       $e3,          $fc,         $ee
!byte $00,   $e0,  $1c,   $03,  $1f,       $e3,          $fc,         $ee

;-------------------------------------------------------------
savex
!byte $00
savey
!byte $00

;-------------------------------------------------------------
scrollx
!byte $00
scr_col
!byte 00
map_col
!byte 00
scr_delay
!byte 00


dstsubtile
!byte 00
subtile0
!byte 00
subtile1
!byte 00
subtile2
!byte 00
subtile3
!byte 00

mtilescount:
!fi 256, $00    ; reserve 256 bytes

PlayerSprite:
!byte $00,$00,$00,$00,$10,$00,$00,$00
!byte $00,$00,$00,$01,$11,$00,$00,$00
!byte $00,$00,$00,$01,$11,$00,$00,$00
!byte $00,$01,$11,$11,$11,$11,$11,$00
!byte $00,$11,$11,$11,$11,$11,$11,$10
!byte $00,$11,$11,$11,$11,$11,$11,$10
!byte $00,$11,$11,$11,$11,$11,$11,$10
!byte $00,$11,$11,$11,$11,$11,$11,$10




PlrBlowupSprites:

!byte $00,$00,$00,$10,$00,$00,$00,$00
!byte $00,$00,$00,$10,$00,$00,$00,$00



;  ........
;  ..*.....
;  *.......
;  **..*...
;  **......
;  ***.....
;  **..**.*
;  ****....
;  ****.*..
;  **......
;  ****.*..
;  *..*..*.
;  ..*.....
;  **......
;  ........
;  *.......
;
1C70: 00 04 01 13 03 07 B3 0F 2F 03 2F 49 04 03 00 01 
;
;  ......*.
;  ...*....
;  *.*.....
;  **...*.*
;  .*.*....
;  **......
;  **.**.*.
;  ****....
;  ***..*..
;  ***..*..
;  **.*....
;  **.*..*.
;  ......*.
;  ..*....*
;  *...*...
;  ...*..*.

