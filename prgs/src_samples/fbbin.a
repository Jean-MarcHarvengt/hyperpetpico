!to "fb.prg"

; mode
REG_VIDEO_MODE    = $9b00
; 0-1: resolution (0=64$200,1=32$200,2=256x200)

REG_TLOOKUP       = $9a00
REG_TCOMMAND      = $9b11
; 1: transfer tiles data      (data=tilenr,64/packet pixels)
; 2: transfer sprites data    (data=spritenr,384/packet pixels)
; 3: transfer bitmap data     (data=xh,xl,y,wh,wl,h,w*h/packet pixels) 
; 4: transfer t/fmap col data (data=layer,col,row,size,size/packet tiles)
; 5: transfer t/fmap row data (data=layer,col,row,size,size/packet tiles)
REG_TPARAMS       = $9b12
REG_TDATA         = $9b13
REG_TSTATUS       = $9b14

ROWLEN     = 80
ROWLEN_LO  = 40
ROWLEN_HI  = 80
FILENAME_SIZE  = 20

*= $0800
        jmp topdir              ; goto root dir and clear

loop:    
        ldx #63                 ; copy directory name for opendir 
copydir:
        lda directory,x
        sta REG_TLOOKUP,x
        dex
        bpl copydir        
        lda #29                 ; cmd_opendir
        sta REG_TCOMMAND
        lda #0
        sta curpage
waitstatusdone:
        lda REG_TSTATUS
        bne waitstatusdone
        lda REG_TLOOKUP
        sta nbfiles             ; nb of files
        cmp #0
        beq no_files
        lda #<filenames         ; dst lo
        sta loc+1
        lda #>filenames         ; dst hi
        sta loc+2
        ldx #0
        lda #0
nextfile:                       ; read DIR filenames char by char
        pha                     ; file index
        tay
        inx
        lda REG_TLOOKUP,x       ; filetype 0=DIR,1=PRG,2=ROM
        sta filetypes,y
        ldy #0
nextchar:
        inx
        lda REG_TLOOKUP,x
        beq endfilename
loc:    sta $8090,y
        iny
        jmp nextchar        
endfilename:
        clc
        lda loc+1
        adc #FILENAME_SIZE
        sta loc+1
        bcc hic             
        inc loc+2          
hic:
        clc
        pla
        adc #1
        cmp nbfiles
        bne nextfile
        jsr print_file_menu

WAIT_KEY
        jsr $FFE4               ; Calling KERNAL GETIN 
        beq WAIT_KEY
        cmp #$1d                ; =>   next page
        beq nextpage
        cmp #$0d
        beq exit
        cmp #$11                ; DOWN 
        beq rewinddir   
        cmp #$14                ; BACK reset
        bne WAIT1
        jmp ($fffc)
no_files:
        jsr print_file_menu
        lda curpage
        beq WAIT_KEY
        jmp loop
WAIT1:        
        cmp #$20                ; SPC  LORES
        bne WAIT2
        lda REG_VIDEO_MODE      ; go to 40 column if in 80 colums
        bne WAIT_KEY
        lda #1
        sta REG_VIDEO_MODE
        jsr clear_screen
        ;jsr install_anyhz
        jsr print_file_menu
        jmp WAIT_KEY
WAIT2:        
        cmp #$30
        bmi WAIT_KEY
        cmp #$3A
        bpl WAIT_KEY
        sec
        sbc #$30
        tax                     ; key to index
        lda key2index,x

        cmp nbfiles
        bpl WAIT_KEY
        pha
        tax
        lda filetypes,x
        tax
        pla
        cpx #0                  ; directory?
        beq newdir

        cpx #2                  ; rom?
        beq isrom         
        pha                     ; prg?
        jsr clear_screen

        lda REG_VIDEO_MODE      ; load file
        beq c80mode
        pla                     ; load 40 colums routine
        jmp c40load_prg            
c80mode:        
        pla
        jmp c80load_prg         ; load 80 colums routine  
isrom:
        pha
        jsr clear_screen
        pla
        jmp load_rom
exit:        
        jsr clear_screen        ; clear screen
        rts 

nextpage:
        jsr clear_files        
        lda #30                 ; cmd_nextdir
        sta REG_TCOMMAND
        lda #1
        sta curpage
        jmp waitstatusdone

rewinddir:
;        lda dirpt
;        bne rew1 
;        jmp WAIT_KEY
;rew1:   tax
;rew2:
;        dex
;        lda directory,x
;        cmp #'/'
;        bne rew2
;        lda #0
;        sta directory,x
topdir:
        lda #0                  ; directory = "" 
        sta directory
        sta dirpt

        jsr clear_files        
        jsr clear_screen
        jmp loop

newdir:
        asl                     ;*4
        asl
        sta by4+1
        asl
        asl
by4:    adc #0                  ;+*16 = *20
        clc 
        jsr append_filename_to_dir
        jsr clear_files        
        jsr clear_screen
        jmp loop



;-------------------------------------------------------------
append_filename_to_dir:
        tax
        ldy dirpt
        lda #'/'
        sta directory,y
        iny
cpydir: lda line0,x
        sta directory,y
        inx
        iny
        cmp #0
        bne cpydir
        dey
        sty dirpt
        rts

;-------------------------------------------------------------
clear_screen:
        ldx #$00                ; clear screen 40col  
clear1:
        lda #32
        sta $8000,x
        sta $8100,x
        sta $8200,x
        sta $8300,x
        dex
        bne clear1

        lda REG_VIDEO_MODE                  
        beq clearhi             ; hires
        lda #ROWLEN_LO          ; init offset table for 40col
        jsr initlineoffset
        jmp install_anyhz
        ;rts
clearhi:
        lda #32
        ldx #$00                ; clear screen remaining for 80col  
clear2:
        sta $8400,x
        sta $8500,x
        sta $8600,x
        sta $8700,x
        dex
        bne clear2
        lda #ROWLEN_HI          ; init offset table for 80col
        jsr initlineoffset 
        rts

;-------------------------------------------------------------
install_anyhz:
        ldx #$00                ; copy anyhz to videomem  
copy1:
        lda anyhz,x
        sta $8410,x
        lda anyhz+$100,x
        sta $8510,x
        lda anyhz+$200,x
        sta $8610,x
        inx
        bne copy1
        ldx #$00  
copy2:
        lda anyhz+$300,x
        sta $8710,x
        inx
        cpx #91
        bne copy2
        jsr $8454               ; call init
        rts

;-------------------------------------------------------------
clear_files:
        ldx #FILENAME_SIZE-1    ; clear file buffer 
clear_f:
        lda #0
        sta filenames,x
        sta filenames+1*FILENAME_SIZE,x
        sta filenames+2*FILENAME_SIZE,x
        sta filenames+3*FILENAME_SIZE,x
        sta filenames+4*FILENAME_SIZE,x
        sta filenames+5*FILENAME_SIZE,x
        sta filenames+6*FILENAME_SIZE,x
        sta filenames+7*FILENAME_SIZE,x
        sta filenames+8*FILENAME_SIZE,x
        sta filenames+9*FILENAME_SIZE,x
        dex
        bpl clear_f
        rts

;-------------------------------------------------------------
initlineoffset:
        sta rowlen+1
        lda #$00                ; $8000
        sta $54
        lda #$80
        sta $55
        ldx #00                 ; line #
init1:        
        lda $54                 ; store lo and hi offset
        sta linelo,x
        lda $55
        sta linehi,x
        clc
        lda $54
rowlen: adc #ROWLEN
        sta $54
        bcc init2             
        inc $55          
init2:
        inx
        cpx #25
        bne init1
        rts
 
;-------------------------------------------------------------
print_tab:    
        pha                             ; print TEXT at 1 TAB 
        lda #3
        jmp print0
print:
        pha                             ; print TEXT 
        lda #0
print0:
        clc
        adc linelo,y                    ; dst lo
        sta addr+1
        lda linehi,y                    ; dst hi
        sta addr+2
        bcc print1
        inc addr+2
print1
        pla
        sta $54                         ; src text lo 
        txa                             ; src text hi
        sta $55
        ldy #$00
print2
        lda ($54),y
        beq pr_end
        cmp #65                         ; 32
        bmi addr
        clc
        sbc #$3f
addr    sta $8000,y
        iny
        bne print2
pr_end
        rts

;-------------------------------------------------------------
print_numbers:                  
        ldx #0                  ; y = start row
pri_num0
        cpx nbfiles
        beq pri_exit
        lda linelo,y            ; dst lo
        sta addrr+1
        lda linehi,y            ; dst hi
        sta addrr+2
        lda numbers,x
addrr   sta $8000               ; store digit
        iny                  
        inx
        jmp pri_num0
pri_exit:                
        rts

;-------------------------------------------------------------
print_file_menu:
        jsr clear_screen        ; clear screen
        lda #<header            ; header/title
        ldx #>header
        ldy #0
        jsr print
        lda #<footer1           ; footer1
        ldx #>footer1
        ldy #13
        jsr print        
        lda #<footer2           ; footer2
        ldx #>footer2
        ldy #14
        jsr print
        lda #<directory         ; footer3
        ldx #>directory
        ldy #15
        jsr print 

        ldy #2                  ; print numbers of each row
        jsr print_numbers
        lda #<line0             ; print 10 filenames list
        ldx #>line0
        ldy #2
        jsr print_tab
        lda #<line1
        ldx #>line1
        ldy #3
        jsr print_tab
        lda #<line2
        ldx #>line2
        ldy #4
        jsr print_tab
        lda #<line3
        ldx #>line3
        ldy #5
        jsr print_tab
        lda #<line4
        ldx #>line4
        ldy #6
        jsr print_tab
        lda #<line5
        ldx #>line5
        ldy #7
        jsr print_tab
        lda #<line6
        ldx #>line6
        ldy #8
        jsr print_tab
        lda #<line7
        ldx #>line7
        ldy #9
        jsr print_tab
        lda #<line8
        ldx #>line8
        ldy #10
        jsr print_tab
        lda #<line9
        ldx #>line9
        ldy #11
        jsr print_tab
        rts

;-------------------------------------------------------------
c80nbbytes  = $8000+$800-153       ; top of videomem in 80cols
c80load_prg:
        sei
        pha
        ldx #0
c80copycodeprg:
        lda c80codeloadprg,x
        sta c80nbbytes,x
        inx
        cpx #$99
        bne c80copycodeprg
        jmp c80nbbytes+1

c80codeloadprg:
        !byte 0
        lda #27                 ; cmd_openfile
        sta REG_TCOMMAND
        pla
        sta REG_TPARAMS         ; file index
c80load0:
        lda REG_TSTATUS
        bne c80load0
        lda REG_TLOOKUP         ; nb bytes
        beq c80load7            ; end of program
        sta c80nbbytes             
        lda REG_TLOOKUP+1       ; start address lo
        sta $54
        lda REG_TLOOKUP+2       ; start address hi
        sta $55
        dec c80nbbytes
        dec c80nbbytes      
        ldy #00                 ; index
        ldx #00
c80load1:        
        lda REG_TLOOKUP+3,x     ; read data byte        
        sta ($54),y             ; store it 
        clc
        lda $54
        adc #1
        sta $54
        bcc c80load2             
        inc $55          
c80load2:   
        inx
        cpx c80nbbytes
        bne c80load1
c80load3:
        lda #28                 ; cmd_readfile
        sta REG_TCOMMAND
c80load4:
        lda REG_TSTATUS
        bne c80load4
        lda REG_TLOOKUP         ; nb bytes
        sta c80nbbytes 
        beq c80load7            ; end of file
        ldy #00                 ; index
        ldx #00
c80load5:        
        lda REG_TLOOKUP+1,x     ; read data byte        
        sta ($54),y             ; store it 
        clc
        lda $54
        adc #1
        sta $54
        bcc c80load6             
        inc $55          
c80load6:    
        inx
        cpx c80nbbytes
        bne c80load5
        beq c80load3

c80load7:
        lda $28
        sta $c7
        lda $29
        sta $c8
        lda $54
        sta $2a
        sta $2c
        sta $2e
        sta $c9
        lda $55
        sta $2b
        sta $2d
        sta $2f
        sta $ca

        lda #$20
        ldx #00
c80erase:
        sta c80nbbytes,x
        inx
        cpx #$8b
        bne c80erase
        cli
        rts

;-------------------------------------------------------------
c40nbbytes  = $8000+$400-153    ; top of videomem in 40cols
c40load_prg:
        sei
        pha
        ldx #0
c40copycodeprg:
        lda c40codeloadprg,x
        sta c40nbbytes,x
        inx
        cpx #$99
        bne c40copycodeprg
        jmp c40nbbytes+1

c40codeloadprg:
        !byte 0
        lda #27                 ; cmd_openfile
        sta REG_TCOMMAND
        pla
        sta REG_TPARAMS         ; file index
c40load0:
        lda REG_TSTATUS
        bne c40load0
        lda REG_TLOOKUP         ; nb bytes
        beq c40load7            ; end of program
        sta c40nbbytes             
        lda REG_TLOOKUP+1       ; start address lo
        sta $54
        lda REG_TLOOKUP+2       ; start address hi
        sta $55
        dec c40nbbytes
        dec c40nbbytes      
        ldy #00                 ; index
        ldx #00
c40load1:        
        lda REG_TLOOKUP+3,x     ; read data byte        
        sta ($54),y             ; store it 
        clc
        lda $54
        adc #1
        sta $54
        bcc c40load2             
        inc $55          
c40load2:   
        inx
        cpx c40nbbytes
        bne c40load1
c40load3:
        lda #28                 ; cmd_readfile
        sta REG_TCOMMAND
c40load4:
        lda REG_TSTATUS
        bne c40load4
        lda REG_TLOOKUP         ; nb bytes
        sta c40nbbytes 
        beq c40load7            ; end of file
        ldy #00                 ; index
        ldx #00
c40load5:        
        lda REG_TLOOKUP+1,x     ; read data byte        
        sta ($54),y             ; store it 
        clc
        lda $54
        adc #1
        sta $54
        bcc c40load6             
        inc $55          
c40load6:    
        inx
        cpx c40nbbytes
        bne c40load5
        beq c40load3

c40load7:
        lda $28
        sta $c7
        lda $29
        sta $c8
        lda $54
        sta $2a
        sta $2c
        sta $2e
        sta $c9
        lda $55
        sta $2b
        sta $2d
        sta $2f
        sta $ca

        lda #$20
        ldx #00
c40erase:
        sta c40nbbytes,x
        inx
        cpx #$8b
        bne c40erase
        cli
        rts

;-------------------------------------------------------------
load_rom:
        sei
        pha
codeloadrom:
        lda #27                 ; cmd_openfile
        sta REG_TCOMMAND
        pla
        sta REG_TPARAMS         ; file index
waitstatusdone3:
        lda REG_TSTATUS
        bne waitstatusdone3
        lda REG_TLOOKUP         ; nb bytes
        beq exitloadrom
        sta nbbytesrom             
        lda #$00                ; start address lo
        sta $54
        lda #$a0                ; start address hi
        sta $55
        ldy #00                 ; index
        ldx #00
load5:        
        lda REG_TLOOKUP+1,x     ; read data byte        
        sta ($54),y             ; store it 
        clc
        lda $54
        adc #1
        sta $54
        bcc load6             
        inc $55          
load6:   
        inx
        cpx nbbytesrom
        bne load5
        
nextblockrom:
        lda #28                 ; cmd_readfile
        sta REG_TCOMMAND
waitstatusdone4:
        lda REG_TSTATUS
        bne waitstatusdone4
        lda REG_TLOOKUP         ; nb bytes
        sta nbbytesrom 
        beq exitloadrom
        ldy #00                 ; index
        ldx #00
load7:        
        lda REG_TLOOKUP+1,x     ; read data byte        
        sta ($54),y             ; store it 
        clc
        lda $54
        adc #1
        sta $54
        bcc load8             
        inc $55          
load8:    
        inx
        cpx nbbytesrom
        bne load7
        beq nextblockrom

exitloadrom:
        cli
        rts

;-------------------------------------------------------------
linelo:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
linehi:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

curpage:
!byte 0
nbfiles:
!byte 0
nbbytesrom:
!byte 0

key2index
!text 9,0,1,2,3,4,5,6,7,8
numbers
!text "1234567890"
dirpt:
!byte 0
directory:
!text "0123456789abcdef0123456789abcdef"
!text "0123456789abcdef0123456789abcdef"
!text "0123456789abcdef0123456789abcdef"
!text "0123456789abcdef0123456789abcdef"

header
!text "FILE BROWSER 1.0, SELECT FILE:   "
!byte 0
footer1
!text "RIGHT=PAGE RET=EXIT SPC=LORES DEL=RESET"
!byte 0
footer2
!text "(0-9) LOAD FILE/OPENDIR     DOWN=TOPDIR"
!byte 0

filetypes
!byte 0,0,0,0,0,0,0,0,0,0
filenames:
line0:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line1:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line2:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line3:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line4:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line5:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line6:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line7:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line8:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
line9:
!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

anyhz: ;849 bytes to 8410 + jsr $8454
!byte $31,$14,$1F,$0F,$31,$00,$19,$25,$00,$07,$00,$00,$10,$00,$00,$00
!byte $00,$00,$00,$28,$50,$78,$A0,$C8,$F0,$18,$40,$68,$90,$B8,$E0,$08
!byte $30,$58,$80,$A8,$D0,$F8,$20,$48,$70,$98,$C0,$20,$57,$49,$4E,$44
!byte $4F,$57,$20,$38,$30,$20,$43,$4F,$4C,$55,$4D,$4E,$20,$56,$45,$52
!byte $20,$31,$2E,$30,$78,$A9,$70,$A2,$84,$85,$EB,$86,$EC,$86,$A7,$58
!byte $20,$76,$84,$A2,$00,$86,$E2,$86,$A7,$20,$82,$E0,$4C,$49,$87,$E0
!byte $20,$50,$85,$4C,$9D,$E1,$A0,$83,$A2,$18,$98,$9D,$3B,$84,$E0,$14
!byte $F0,$08,$E0,$0D,$F0,$04,$E0,$07,$D0,$01,$88,$CA,$10,$EC,$E8,$86
!byte $9F,$86,$C4,$A9,$20,$9D,$00,$80,$9D,$00,$81,$9D,$00,$82,$9D,$00
!byte $83,$CA,$D0,$F1,$A0,$00,$84,$C6,$84,$D8,$A6,$D8,$BD,$3B,$84,$09
!byte $80,$85,$C5,$BD,$22,$84,$85,$C4,$A9,$27,$85,$D5,$E0,$18,$F0,$09
!byte $BD,$3C,$84,$30,$04,$A9,$4F,$85,$D5,$A5,$C6,$C9,$28,$90,$04,$E9
!byte $28,$85,$C6,$60,$09,$40,$A6,$9F,$F0,$02,$09,$80,$A6,$DC,$F0,$02
!byte $C6,$DC,$20,$06,$E6,$E6,$C6,$A4,$D5,$C4,$C6,$B0,$10,$A6,$D8,$C0
!byte $4F,$D0,$0B,$20,$1E,$85,$20,$68,$86,$A9,$00,$85,$C6,$60,$E0,$18
!byte $D0,$09,$20,$8C,$86,$C6,$A3,$C6,$D8,$A6,$D8,$1E,$3C,$84,$5E,$3C
!byte $84,$20,$1E,$85,$A5,$C6,$48,$20,$AA,$84,$68,$85,$C6,$60,$E0,$17
!byte $B0,$08,$BD,$3D,$84,$09,$80,$9D,$3D,$84,$60,$A0,$27,$A6,$D8,$D0
!byte $05,$86,$C6,$68,$68,$60,$BD,$3A,$84,$30,$06,$CA,$BD,$3A,$84,$A0
!byte $4F,$CA,$86,$D8,$85,$C5,$BD,$22,$84,$85,$C4,$84,$C6,$84,$D5,$60
!byte $A9,$00,$85,$AC,$A5,$D9,$29,$7F,$C9,$1B,$D0,$05,$68,$68,$4C,$BD
!byte $E3,$A4,$C6,$A5,$D9,$30,$6A,$C9,$0D,$D0,$03,$4C,$7F,$86,$C9,$20
!byte $90,$08,$29,$3F,$20,$6A,$E1,$4C,$D6,$84,$A6,$DC,$F0,$03,$4C,$DA
!byte $84,$C9,$14,$D0,$12,$88,$84,$C6,$10,$08,$20,$2B,$85,$68,$68,$4C
!byte $5C,$E2,$68,$68,$4C,$51,$E2,$A6,$CD,$F0,$03,$4C,$DA,$84,$C9,$12
!byte $D0,$03,$85,$9F,$60,$C9,$13,$D0,$03,$4C,$A4,$84,$C9,$1D,$D0,$10
!byte $C8,$84,$C6,$88,$C4,$D5,$90,$07,$20,$68,$86,$A9,$00,$85,$C6,$60
!byte $C9,$11,$D0,$FB,$18,$98,$69,$28,$C5,$D5,$90,$F1,$F0,$EF,$4C,$68
!byte $86,$29,$7F,$C9,$7F,$D0,$02,$A9,$5E,$C9,$20,$90,$03,$4C,$D4,$84
!byte $C9,$0D,$D0,$03,$4C,$7F,$86,$A6,$CD,$D0,$2F,$C9,$14,$D0,$27,$A4
!byte $D5,$B1,$C4,$C9,$20,$D0,$04,$C4,$C6,$D0,$07,$C0,$4F,$F0,$16,$20
!byte $EE,$86,$A4,$D5,$88,$B1,$C4,$C8,$91,$C4,$88,$C4,$C6,$D0,$F5,$A9
!byte $20,$91,$C4,$E6,$DC,$60,$A6,$DC,$F0,$05,$09,$40,$4C,$DA,$84,$C9
!byte $11,$D0,$2A,$A5,$C6,$C9,$28,$90,$05,$E9,$28,$85,$C6,$60,$A6,$D8
!byte $F0,$FB,$BD,$3A,$84,$10,$07,$C6,$D8,$20,$AA,$84,$90,$EF,$CA,$CA
!byte $86,$D8,$20,$AA,$84,$A5,$C6,$18,$69,$28,$85,$C6,$60,$C9,$12,$D0
!byte $04,$A9,$00,$85,$9F,$C9,$1D,$D0,$08,$88,$84,$C6,$10,$EE,$20,$2B
!byte $85,$C9,$13,$D0,$E7,$4C,$76,$84,$38,$46,$A3,$A6,$D8,$E8,$E0,$19
!byte $D0,$03,$20,$8C,$86,$BD,$3B,$84,$10,$F3,$86,$D8,$4C,$AA,$84,$A9
!byte $00,$85,$C6,$85,$9F,$85,$CD,$85,$DC,$4C,$68,$86,$A0,$00,$84,$C4
!byte $A9,$80,$85,$C8,$85,$C5,$A9,$28,$2C,$3C,$84,$30,$02,$A9,$50,$85
!byte $C7,$B1,$C7,$91,$C4,$C8,$D0,$F9,$E6,$C8,$E6,$C5,$A9,$84,$C5,$C8
!byte $D0,$EF,$A9,$E8,$85,$C4,$C6,$C5,$A9,$20,$C6,$C4,$C6,$C7,$91,$C4
!byte $D0,$F8,$A2,$19,$86,$D8,$A2,$00,$C6,$D8,$BD,$3B,$84,$29,$7F,$BC
!byte $3C,$84,$10,$02,$09,$80,$9D,$3B,$84,$E8,$E0,$19,$D0,$EC,$A9,$83
!byte $8D,$53,$84,$AD,$3B,$84,$10,$DE,$20,$0B,$E4,$A6,$D8,$60,$A6,$D8
!byte $E8,$E0,$18,$F0,$36,$90,$03,$4C,$02,$85,$A2,$17,$BD,$3C,$84,$09
!byte $80,$85,$C8,$BC,$3B,$84,$30,$02,$29,$7F,$9D,$3C,$84,$98,$09,$80
!byte $85,$C5,$A0,$27,$BD,$23,$84,$85,$C7,$BD,$22,$84,$85,$C4,$B1,$C4
!byte $91,$C7,$88,$10,$F9,$CA,$E4,$D8,$D0,$D2,$E8,$BD,$3B,$84,$09,$80
!byte $85,$C5,$29,$7F,$9D,$3B,$84,$BD,$22,$84,$85,$C4,$A0,$27,$A9,$20
!byte $91,$C4,$88,$10,$FB,$58,$4C,$AA,$84,$A0,$01,$8C,$80,$E8,$A9,$14
!byte $8D,$81,$E8,$C8,$8C,$80,$E8,$AD,$3E,$E7,$38,$E9,$0A,$8D,$81,$E8,$60

