; This code is derived from the AppleII-VGA project
; https://github.com/markadev/AppleII-VGA/blob/main/pico/abus.pio
;
; PET memory expansion bus interface
;
; WRITE CYCLE:
;
;                  500ns                    500ns
;       <------------------------><------------------------>
;                                  _________________________                       
;       |                         |                         |                         |
; PHI2  |_________________________|                         |_________________________|
;                                 ^
;       __                                                     __________________________
;         |                                                   |        
; R/W     |___________________________________________________|                                                   |
;                                4*12ns  4*(12+31+27+)ns
;                                 <--><------------->      
;                                 ^  ^              ^
;                                 |  |              |
;                            AddrHi  |              |
;                               AddrLo              |
;                                          Data(+R/W)
; READ CYCLE:
;       _________________________________________________________________________________
;                                                                      
; R/W   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
;                               4*12ns 4*12ns         (200-12*4)ns before falling edge
;                                 <--><--> . . . . . . <--->      
;                                 ^  ^   ^             ^
;                                 |  |   |             |
;                            AddrHi  |   |             data is put here
;                               AddrLo   |
;                                Data(+R/W)

.define public PHI2_GPIO 26

.program petbus
; Prerequisites:
;  * Bus clock used is PHI2, wired to GPIO 26
;  * JMP pin is mapped to the R/W signal
;  * IN pins are mapped to input[7:0] + R/W 
;  * SET pins are mapped to the 3 transceiver enable signals
;  * selecting AddrHi[7:0], AddrLo[7:0] or Data[7:0] on input[7:0]
;  * input shift left & autopush @ 25 bits
;  * run at about 250MHz (4ns/instruction)
;
; SET bits for tranceiver control:
;  0bxxx
;    x    - select AddrHi, active low
;     x   - select AddrLo, active low
;      x  - select Data, active low
;
.wrap_target
next_bus_cycle:
    set PINS, 0b011                     ; enable AddrHi tranceiver (PHI2 just felt before wrapping)
    wait 1 GPIO, PHI2_GPIO              ; wait for PHI2 to rise
    in PINS, 8                          ; read AddrHi[7:0]
    set PINS, 0b101  [10]               ; [14]? enable AddrLo tranceiver + wait 12*4ns
    in PINS, 8                          ; read AddrLo[7:0]
    set PINS, 0b110  [10]               ; [14]? enable Data tranceiver + wait 12*4ns
    jmp PIN, read_cycle                 ; jump based on the state of the R/W pin (1=read)

write_cycle:
 ;   nop              [31]               ; wait 31*4ns
 ;   nop              [27]               ; wait 27*4ns
    in PINS, 9                          ; Data[7:0] + R/W, then autopush
    wait 0 GPIO, PHI2_GPIO  [14]        ; wait for PHI2 to fall and wait 14*4ns
    jmp next_bus_cycle

read_cycle:
    in PINS, 9                          ; dontcare[7:0] + R/W, then autopush (asap to know if in read memory map)
    irq set 7
    wait 0 GPIO, PHI2_GPIO  [14]        ; wait for PHI2 to fall and wait 14*4ns
    wait 0 irq 6
.wrap


.program petbus_device_read
; Prerequisites:
;  * Bus clock used is PHI2, wired to GPIO 26
;  * OUT pins are the 8 data signals
;  * SET pin is the DATADIR Data transceiver control signal
;  * sideset pin being the data tranceiver also used
; SET bits for tranceiver control:
;  0bx
;    x - Data transceiver direction + CS OUT (1=input, 0=output)
;
.wrap_target
wait_loop:
    wait 1 irq 7                      ; wait start of read cycle from main sm
    pull                              ; pull 32bit in OSR (block till something there)
    mov X, OSR                        ; save OSR in X for later
    jmp !X,wait_loop                  ; 0 means read not for us (not in pico read memory map)
    irq set 6                         ; block main sm
    set PINS, 0b0                     ; enable DATADIR (now outputing data), now we are 200ns before falling edge
    mov OSR, ~NULL                    ; change data pins as outputs 
    out PINDIRS, 8  
    mov OSR, X                        ; output data lowest 8 bits (12*4ns later)
    out PINS, 8 

    wait 0 GPIO, PHI2_GPIO [7]        ; wait for PHI0 to fall 
    set PINS, 0b1                     ; disable DATADIR (now input)
    mov OSR, NULL
    out PINDIRS, 8                    ; reset data pins as inputs

    pull noblock                      ; empty fifo in case....
    irq clear 6                       ; let main sm continue
.wrap
